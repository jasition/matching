plugins {
    id 'jacoco' // Code coverage
    id 'org.jetbrains.kotlin.jvm' version '1.4.10'
//    id 'nl.fabianm.kotlin.plugin.generated' version '1.5.0' // Exclude Kotlin generated code in code coverage
    id 'idea'
    id "me.champeau.gradle.jmh" version "0.5.1" // Benchmarking
}

group 'jasition'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    jcenter()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

sourceSets {
    scenarioTest {
        kotlin {
            srcDir file('src/scenario-test/kotlin')
            outputDir = file('out/scenario-test/kotlin')
            compileClasspath += sourceSets.main.output + configurations.testCompile
            runtimeClasspath += output + compileClasspath + configurations.testRuntime
        }
    }
}

idea {
    module {
        testSourceDirs += sourceSets.scenarioTest.kotlin.srcDirs
        testSourceDirs += sourceSets.jmh.kotlin.srcDirs
        scopes.TEST.plus += [configurations.scenarioTestCompile]
    }
}

dependencies {
    compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    // Arrow (Monads)
    implementation("io.arrow-kt:arrow-core:0.8.2") {
        exclude group: 'org.jetbrains.kotlin'
    }
    testCompile("io.arrow-kt:arrow-test:0.8.2") {
        exclude group: 'io.kotlintest'
    }

    // Vavr (Persistent collections only)
    compile "io.vavr:vavr:0.9.3"
    compile('io.vavr:vavr-kotlin:0.9.3') {
        exclude group: 'org.jetbrains.kotlin'
    }

    // Kotlin Test (Test framework and fluent assertions)
    testCompile 'io.kotlintest:kotlintest-runner-junit5:3.3.1'
    testCompile 'org.jetbrains.kotlin:kotlin-reflect:1.3.11'

    // MockK (Mocking and spying framework)
    testImplementation('io.mockk:mockk:1.9.3') {
        exclude group: 'io.kotlintest'
    }

    scenarioTestCompile sourceSets.main.output
    scenarioTestCompile sourceSets.test.output
    scenarioTestRuntime configurations.compile
    scenarioTestRuntime configurations.testCompile
    scenarioTestRuntime configurations.runtime
    scenarioTestRuntime configurations.testRuntime
}

test {
    failFast = true

    useJUnitPlatform {
        includeEngines 'kotlintest'
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest results: ${result.resultType} " +
                    "(${result.testCount} tests completed, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped)"
        }
    }
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
    reports.html.setDestination(file("$buildDir/reports/unit-tests"))

}
compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileScenarioTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

jacoco {
    toolVersion = "0.8.3"
    reportsDir = file("$buildDir/reports/coverage")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/reports/coverage")
    }

    afterEvaluate {
//        classDirectories = files(classDirectories.files.collect {
//            fileTree(dir: it,
//                    exclude: ['**/scenario/**',
//                              '**/benchmark/**'
//                    ]
//            )
//        })
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                minimum = 0
//                minimum = 1
            }
            excludes = [
                    "*.scneario.*",
                    "*.benchmark.*"
            ]
        }
    }
}

check.dependsOn jacocoTestCoverageVerification
build.dependsOn jacocoTestReport

task scenarioTest(type: Test) {
    useJUnitPlatform {
        includeEngines 'kotlintest'
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nScenario Test results: ${result.resultType} " +
                    "(${result.testCount} tests completed, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped)"
        }
    }

    description = 'Runs the scenario tests.'
    group = 'verification'
    testClassesDirs = sourceSets.scenarioTest.output.classesDirs
    classpath = sourceSets.scenarioTest.runtimeClasspath
    mustRunAfter test
    reports.html.setDestination(file("$buildDir/reports/scenario-tests"))
}
check.dependsOn scenarioTest

jmh {
    include = 'jasition.matching.domain.benchmark.*BenchmarkTest.*'
    warmupIterations = 1
    iterations = 1
    resultFormat = 'JSON'
    forceGC = true
}